{"version":3,"sources":["atoms.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","components/CustomCategory.tsx","App.tsx","index.tsx","theme.ts"],"names":["categoryState","atom","key","default","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","customCategoriesState","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","useForm","register","handleSubmit","setValue","onSubmit","oldToDos","text","id","Date","now","required","placeholder","ToDo","customCategories","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","map","customCategory","ToDoList","console","log","CustomCategory","useRecoilState","setCustomCategory","setCategory","addCategory","oldCategory","value","onInput","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"iMAQaA,EAAgBC,YAAa,CACxCC,IAAK,WACLC,QAAS,UAGEC,EAAYH,YAAc,CACrCC,IAAK,OACLC,QAAS,KAGEE,EAAeC,YAAS,CACnCJ,IAAK,eACLK,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIH,GACZK,EAAWF,EAAIP,GACrB,OAAOQ,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,QAIvCG,EAAwBX,YAAe,CAClDC,IAAK,mBACLC,QAAS,CAAC,QAAS,QAAS,U,sBCGfU,MAxBf,WACE,IAAMC,EAAWC,YAAkBX,GAC7BK,EAAWO,YAAehB,GAChC,EAA6CiB,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAQhC,OACE,uBAAMC,SAAUF,GARE,SAAC,GAAqB,IAAnBR,EAAkB,EAAlBA,KACrBG,GAAS,SAACQ,GAAD,OACP,CAAEC,KAAMZ,EAAMa,GAAIC,KAAKC,MAAOjB,aADvB,mBAEJa,OAELF,EAAS,OAAQ,OAGjB,UACE,iDACMF,EAAS,OAAQ,CACnBS,SAAU,0BAFd,IAIEC,YAAY,mBAEd,6CCSSC,MAhCf,YAA8C,IAA9BN,EAA6B,EAA7BA,KAAMd,EAAuB,EAAvBA,SAAUe,EAAa,EAAbA,GACxBV,EAAWC,YAAkBX,GAC7B0B,EAAmBd,YAAeJ,GAClCmB,EAAU,SAACC,GACf,IACmBC,EACfD,EADFE,cAAiBD,KAEnBnB,GAAS,SAACQ,GACR,IAAMa,EAAcb,EAASc,WAAU,SAACzB,GAAD,OAAUA,EAAKa,KAAOA,KACvDa,EAAU,CAAEd,OAAMC,KAAIf,SAAUwB,GACtC,MAAM,GAAN,mBACKX,EAASgB,MAAM,EAAGH,IADvB,CAEEE,GAFF,YAGKf,EAASgB,MAAMH,EAAc,SAKtC,OACE,+BACE,+BAAOZ,IACNO,EAAiBS,KAAI,SAACC,GAAD,OACpB/B,IAAa+B,GACX,wBAAQP,KAAMO,EAAgBT,QAASA,EAAvC,SACGS,SALAhB,ICFEiB,MAhBf,WACE,IAAMjC,EAAQQ,YAAeX,GAG7B,OAFAqC,QAAQC,IAAInC,GAGV,gCACE,wCACA,uBACA,cAAC,EAAD,IAHF,OAIGA,QAJH,IAIGA,OAJH,EAIGA,EAAO+B,KAAI,SAAC5B,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAKa,W,OC4BToB,I,EAAAA,EAlCf,WACE,MAA4CC,YAAejC,GAA3D,mBAAO4B,EAAP,KAAuBM,EAAvB,KACA,EAAgCD,YAAe7C,GAA/C,mBAAOS,EAAP,KAAiBsC,EAAjB,KACA,EAA6C9B,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAYhC,OACE,gCACE,iDACA,uBACA,uBAAMC,SAAUF,GAfA,SAAC,GAA4B,IAA1B6B,EAAyB,EAAzBA,YACrBF,GAAkB,SAACG,GAAD,4BACbA,GADa,CAEhBD,OAEF5B,EAAS,cAAe,OAUtB,UACE,wBAAQ8B,MAAOzC,EAAU0C,QATf,SAACnB,GACfe,EAAYf,EAAME,cAAcgB,QAQ5B,SACGV,EAAeD,KAAI,SAAC9B,GAAD,OAClB,wBAAQyC,MAAOzC,EAAf,SAA0BA,SAG9B,iDAAWS,EAAS,gBAApB,IACEU,YAAY,6BAEd,gDCjCFwB,EAAcC,YAAH,u+CAuDI,SAACC,GAAD,OAAWA,EAAMC,MAAMC,WAClC,SAACF,GAAD,OAAWA,EAAMC,MAAME,aAoBlBC,MAXf,WACE,OACE,qCACE,cAACN,EAAD,IACA,cAAC,EAAD,IACA,uBACA,cAAC,EAAD,QCpENO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeN,MCRkB,CACrCC,QAAS,UACTC,UAAW,QACXK,YAAa,UACbC,YAAa,eDIT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.2124132d.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: string;\r\n}\r\n\r\nexport const categoryState = atom<string>({\r\n  key: \"category\",\r\n  default: \"To Do\",\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: [],\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n\r\nexport const customCategoriesState = atom<string[]>({\r\n  key: \"customCategories\",\r\n  default: [\"To Do\", \"Doing\", \"Done\"],\r\n});\r\n\r\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => [\r\n      { text: toDo, id: Date.now(), category },\r\n      ...oldToDos,\r\n    ]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { customCategoriesState, IToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const customCategories = useRecoilValue(customCategoriesState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <li key={id}>\r\n      <span>{text}</span>\r\n      {customCategories.map((customCategory) => (\r\n        category !== customCategory && (\r\n          <button name={customCategory} onClick={onClick}>\r\n            {customCategory}\r\n          </button>\r\n        )\r\n      ))}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import { useRecoilValue } from \"recoil\";\r\nimport { toDoSelector } from \"../atoms\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  console.log(toDos);\r\n\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { categoryState, customCategoriesState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  addCategory: string;\r\n}\r\n\r\nfunction CustomCategory() {\r\n  const [customCategory, setCustomCategory] = useRecoilState(customCategoriesState);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ addCategory }: IForm) => {\r\n    setCustomCategory((oldCategory) => [\r\n      ...oldCategory,\r\n      addCategory\r\n    ]);\r\n    setValue(\"addCategory\", \"\");\r\n  };\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Custom Category</h1>\r\n      <hr />\r\n      <form onSubmit={handleSubmit(handleValid)}>\r\n        <select value={category} onInput={onInput}>\r\n          {customCategory.map((category) => (\r\n            <option value={category}>{category}</option>\r\n          ))}\r\n        </select>\r\n        <input {...register(\"addCategory\")} \r\n          placeholder=\"Write a category to add\"\r\n        />\r\n        <button>Add</button>\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CustomCategory;","import { createGlobalStyle } from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\nimport CustomCategory from \"./components/CustomCategory\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <CustomCategory />\r\n      <br />\r\n      <ToDoList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { darkTheme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"transparent\",\r\n};\r\n"],"sourceRoot":""}